let Joi,CustomErrorHandler,User;_2ed‍.x([["default",()=>_2ed‍.o]]);_2ed‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_2ed‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_2ed‍.w("../../models",[["User",["User"],function(v){User=v}]]);



const registerControllers = {
  //register
  async register(req, res, next) {
    //Validation
    const registerSchema = Joi.object({
      name: Joi.string().min(3).max(30).required(),
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3-30}$"))
        .required(),
      repeat_password: Joi.ref("password"),
    });

    _2ed‍.g.console.log(req.body);

    const { error } = registerSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    //check if user is in the database
    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomErrorHandler.alreadyExist("Thes email is already taken.")
        );
      }
    } catch (err) {
      return next(err);
    }

    res.json({
      msg: "Hello",
    });
  },
};

_2ed‍.d(registerControllers);
